"use strict";(self.webpackChunk_watchlist_v2_docs=self.webpackChunk_watchlist_v2_docs||[]).push([[2443],{10936:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"architecture","title":"Architecture","description":"Pulsarr uses a full-stack architecture designed for reliability and performance:","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/Pulsarr/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/jamcalli/pulsarr/edit/main/docs/docs/architecture.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Environment Variables Reference","permalink":"/Pulsarr/docs/development/environment-variables"},"next":{"title":"Contributing","permalink":"/Pulsarr/docs/contributing"}}');var t=i(74848),r=i(28453);const o={sidebar_position:6},l="Architecture",a={},c=[{value:"Backend",id:"backend",level:2},{value:"Frontend",id:"frontend",level:2},{value:"Integration Points",id:"integration-points",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Content Routing",id:"content-routing",level:3},{value:"Notification Flow",id:"notification-flow",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,t.jsx)(n.p,{children:"Pulsarr uses a full-stack architecture designed for reliability and performance:"}),"\n",(0,t.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fastify"}),": High-performance API server with plugin system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQLite"}),": Lightweight database for storing user, watchlist, and configuration data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TypeScript"}),": Type-safe code for better reliability and maintainability"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"frontend",children:"Frontend"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React"}),": Component-based UI for responsive user experience"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tailwind CSS"}),": Utility-first styling for consistent design"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vite"}),": Modern build tool for fast development and optimized production"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plex API"}),": Monitors watchlist changes through RSS feeds, token syncs, and graphql calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sonarr/Radarr APIs"}),": Manages content acquisition across multiple instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discord API"}),": Delivers notifications through custom bot and webhooks"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsx)(n.h3,{id:"content-routing",children:"Content Routing"}),"\n",(0,t.jsx)(n.p,{children:"Pulsarr uses an intelligent workflow to process and route content:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content Detection"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Plex Pass: Real-time monitoring via RSS feeds"}),"\n",(0,t.jsx)(n.li,{children:"Non-Plex Pass: Regular polling every 20 minutes"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Permissions"}),": Verifies if the user has sync permissions enabled"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content Analysis"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Evaluates content metadata (genres, language, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Applies configured routing rules"}),"\n",(0,t.jsx)(n.li,{children:"Determines optimal target instance"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Instance Management"}),": Routes content to appropriate instances based on rules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Notification System"}),": Sends configurable notifications when content is available"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"notification-flow",children:"Notification Flow"}),"\n",(0,t.jsx)(n.p,{children:"The notification system is designed to be informative:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Webhook Reception"}),": Receives webhooks from Sonarr/Radarr when content is imported"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Smart Queuing"}),": Groups multiple episodes from the same season to prevent notification spam (when importing non-season packs)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Processing"}),": Intelligently batches season packs into single notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Targeting"}),": Identifies users who have the show in their watchlist and have enabled notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-channel Delivery"}),": Sends personalized notifications via Discord DMs, Apprise, and can send global grabs via webhooks and Apprise system notification endpoints"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Customizable Preferences"}),": Each user can configure their notification preferences via Discord, or the admin can via the UI"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);