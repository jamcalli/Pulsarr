"use strict";(self.webpackChunk_watchlist_v2_docs=self.webpackChunk_watchlist_v2_docs||[]).push([[7164],{89372:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>x,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"development/environment-variables","title":"Environment Variables Reference","description":"This document provides a comprehensive reference of all environment variables available in Pulsarr. Most users only need the basic configuration shown in the Configuration Guide, but this reference is useful for development and advanced deployments.","source":"@site/docs/development/environment-variables.md","sourceDirName":"development","slug":"/development/environment-variables","permalink":"/Pulsarr/docs/development/environment-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/jamcalli/pulsarr/edit/main/docs/docs/development/environment-variables.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Public Content Notifications","permalink":"/Pulsarr/docs/utilities/public-content-notifications"},"next":{"title":"Architecture","permalink":"/Pulsarr/docs/architecture"}}');var o=i(74848),t=i(28453);const a={sidebar_position:1},s="Environment Variables Reference",l={},d=[{value:"Complete Development Configuration",id:"complete-development-configuration",level:2},{value:"Authentication Configuration Details",id:"authentication-configuration-details",level:2},{value:"Environment Variable Categories",id:"environment-variable-categories",level:2},{value:"Core Application",id:"core-application",level:3},{value:"Database",id:"database",level:3},{value:"Security &amp; Sessions",id:"security--sessions",level:3},{value:"External Integrations",id:"external-integrations",level:3},{value:"Media Management",id:"media-management",level:3},{value:"Advanced Features",id:"advanced-features",level:3},{value:"Quota &amp; Approval Systems",id:"quota--approval-systems",level:3},{value:"Variable Override Behavior",id:"variable-override-behavior",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"environment-variables-reference",children:"Environment Variables Reference"})}),"\n",(0,o.jsxs)(n.p,{children:["This document provides a comprehensive reference of all environment variables available in Pulsarr. Most users only need the basic configuration shown in the ",(0,o.jsx)(n.a,{href:"../installation/configuration",children:"Configuration Guide"}),", but this reference is useful for development and advanced deployments."]}),"\n",(0,o.jsx)(n.admonition,{title:"For Developers",type:"note",children:(0,o.jsx)(n.p,{children:"This reference includes internal variables used for development, testing, and advanced configurations. Many of these are not needed for typical production deployments."})}),"\n",(0,o.jsx)(n.h2,{id:"complete-development-configuration",children:"Complete Development Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Below is an example showcasing all available environment variables:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-env",children:"# Application Runtime (Docker/System Level)\nTZ=America/Los_Angeles                 # Timezone for the application container\nNODE_ARGS=--log-both                   # Node.js logging configuration for Docker\n\n# Server Configuration\nbaseUrl=http://x.x.x.x                 # Local network address\nport=3003                              # Application port\ndbPath=./data/db/pulsarr.db            # SQLite database location (only used when dbType is not set)\n\n# PostgreSQL Configuration (optional - uncomment to use PostgreSQL instead of SQLite)\n# dbType=postgres                      # Database type: 'sqlite', 'postgres' (default: sqlite)\n# dbHost=your-postgres-host            # PostgreSQL server hostname or IP\n# dbPort=5432                          # PostgreSQL server port (optional, defaults to 5432)\n# dbName=pulsarr                       # PostgreSQL database name\n# dbUser=pulsarr                       # PostgreSQL username\n# dbPassword=your-secure-password      # PostgreSQL password\n# dbConnectionString=                  # Alternative: PostgreSQL connection string (takes priority over individual settings)\ncookieSecret=xxxxxxxxxxxxxxxxxxxxxxxx  # Secret key for cookies (randomly generated by default)\ncookieName=pulsarr                     # Name of the cookie\ncookieSecured=false                    # Set to true for HTTPS only\nallowIframes=false                     # Set to true to allow embedding in dashboard apps like Organizr\nlogLevel=info                          # Logging level: 'fatal', 'error', 'warn', 'info', 'debug', 'trace', 'silent' (default: info)\nauthenticationMethod=required          # Authentication method: 'required', 'requiredExceptLocal', 'disabled' (default: required)\ncloseGraceDelay=10000                  # Shutdown grace period in ms\nrateLimitMax=500                       # Max requests per time window\nsyncIntervalSeconds=10                 # Sync interval in seconds\nqueueProcessDelaySeconds=60            # Queue processing delay in seconds\n\n# Notification Queue Settings\npendingWebhookRetryInterval=20         # Retry interval for pending notifications in seconds\npendingWebhookMaxAge=10                # Max age for pending notifications in minutes\npendingWebhookCleanupInterval=60       # Cleanup interval for old notifications in minutes\n\n# Discord Configuration\ndiscordWebhookUrl=https://discord.com/api/webhooks/xxxx/xxxx  # Webhook URL(s), separate multiple with commas\ndiscordBotToken=xxxx.xxxx.xxxx                                # Bot token\ndiscordClientId=xxxxxxxxxxxx                                  # Client ID\ndiscordGuildId=xxxxxxxxxxxx                                   # Server ID\n\n# Apprise Configuration\nappriseUrl=http://x.x.x.x:8000         # URL for the Apprise server (e.g., http://apprise:8000 for Docker networking)\nenableApprise=true                     # This is auto set by Pulsarr based on the availability of the Apprise server\nsystemAppriseUrl=                      # Apprise URL for system notifications only\n\n# General Notifications\nqueueWaitTime=120000                   # Queue wait time in ms\nnewEpisodeThreshold=172800000          # New episode threshold in ms (48h)\nupgradeBufferTime=2000                 # Buffer time between upgrades in ms\n\n# Tautulli Configuration\ntautulliEnabled=false                  # Enable Tautulli integration (requires Plex Pass)\ntautulliUrl=http://x.x.x.x:8181        # Tautulli server URL\ntautulliApiKey=xxxxxxxxxxxxxxxxxxxxxxxx # Tautulli API key\n\n# Sonarr Configuration (these will seed a single instance. Needs all the values. Only use in dev.)\nsonarrBaseUrl=http://x.x.x.x:8989      # Sonarr instance URL\nsonarrApiKey=xxxxxxxxxxxxxxxxxxxxxxxx  # Sonarr API key\nsonarrQualityProfile=                  # Quality profile name (empty = default. Also accepts name or number)\nsonarrRootFolder=                      # Root folder path (empty = default. Or accepts string of the path url)\nsonarrBypassIgnored=false              # Bypass ignored setting\nsonarrSeasonMonitoring=all             # Season monitoring strategy\nsonarrMonitorNewItems=all              # Monitor strategy for new items: 'all' or 'none' (default: all)\nsonarrTags=[]                          # Tags as JSON array\nsonarrCreateSeasonFolders=false        # Create season folders (true/false)\n\n# Radarr Configuration (these will seed a single instance. Needs all the values. Only use in dev.)\nradarrBaseUrl=http://x.x.x.x:7878      # Radarr instance URL\nradarrApiKey=xxxxxxxxxxxxxxxxxxxxxxxx  # Radarr API key\nradarrQualityProfile=                  # Quality profile name (empty = default. Also accepts name or number)\nradarrRootFolder=                      # Root folder path (empty = default. Or accepts string of the path url)\nradarrBypassIgnored=false              # Bypass ignored setting\nradarrTags=[]                          # Tags as JSON array\n\n# Plex Configuration\nplexTokens=[\"xxxxxxxxxxxxxxxxxxxx\"]    # Plex authentication token\nskipFriendSync=false                   # Skip syncing Plex friends\nenablePlexPlaylistProtection=false     # Enable playlist protection feature\nplexProtectionPlaylistName=\"Do Not Delete\"  # Name of protection playlist\nplexServerUrl=http://localhost:32400   # Plex server URL (optional, can be auto-detected)\nselfRss=                               # Self RSS feed URL (optional)\nfriendsRss=                            # Friends RSS feed URL (optional)\n\n# User Tagging Configuration\ntagUsersInSonarr=false                 # Enable automatic user tagging in Sonarr\ntagUsersInRadarr=false                 # Enable automatic user tagging in Radarr\ntagPrefix=pulsarr:user                 # Prefix for user tags - required alphanumeric, dash, underscore, colon, period only\ncleanupOrphanedTags=true               # When true, removes tags for deleted users during sync\nremovedTagMode=remove                  # How to handle tags when content is removed: 'remove', 'keep', 'special-tag' (default: remove)\nremovedTagPrefix=pulsarr:removed       # Prefix for removal tags when using 'special-tag' mode\ndeletionMode=watchlist                 # Deletion workflow mode: 'watchlist', 'tag-based' (default: watchlist)\n\n# Delete Configuration\ndeleteMovie=false                      # Auto-delete movies setting\ndeleteEndedShow=false                  # Auto-delete ended shows setting\ndeleteContinuingShow=false             # Auto-delete continuing shows setting\ndeleteFiles=true                       # Delete files from disk setting\nrespectUserSyncSetting=true            # Only delete content from users with sync enabled\ndeleteSyncNotify=none                  # Notify of delete sync status: 'none', 'message', 'webhook', 'both', 'all', 'discord-only', 'apprise-only', 'webhook-only', 'dm-only', 'discord-webhook', 'discord-message', 'discord-both' (default: none)\ndeleteSyncNotifyOnlyOnDeletion=false   # Only send notifications when items are actually deleted\nmaxDeletionPrevention=10               # Safeguard to prevent mass deletion. % of total library to allow during delete sync\n\n# Plex Session Monitoring\nplexSessionMonitoring='{\"enabled\":false,\"pollingIntervalMinutes\":15,\"remainingEpisodes\":2,\"filterUsers\":[],\"enableAutoReset\":true,\"inactivityResetDays\":7,\"autoResetIntervalHours\":24,\"enableProgressiveCleanup\":false}'  # JSON config for session monitoring\n# Session monitoring configuration (JSON format):\n# - enabled: Enable/disable session monitoring (default: false)\n# - pollingIntervalMinutes: How often to check sessions in minutes (default: 15, range: 1-1440)\n# - remainingEpisodes: Episodes remaining before triggering search (default: 2, range: 1-10)\n# - filterUsers: Array of usernames to monitor, empty for all users (default: [])\n# - enableAutoReset: Enable automatic reset of inactive shows (default: true)\n# - inactivityResetDays: Days without activity before reset (default: 7, range: 1-365)\n# - autoResetIntervalHours: How often to check for inactive shows in hours (default: 24, range: 1-168)\n# - enableProgressiveCleanup: Enable progressive cleanup of previous seasons (default: false)\n\n# Public Content Notifications (JSON Configuration)\npublicContentNotifications='{\"enabled\":false,\"discordWebhookUrls\":\"\",\"discordWebhookUrlsMovies\":\"\",\"discordWebhookUrlsShows\":\"\",\"appriseUrls\":\"\",\"appriseUrlsMovies\":\"\",\"appriseUrlsShows\":\"\"}'  # JSON config for public content notifications\n\n# New User Defaults\nnewUserDefaultCanSync=true             # Default sync permission for new users\n\n# Quota System Configuration\nquotaSettings='{\"cleanup\":{\"enabled\":true,\"retentionDays\":90},\"weeklyRolling\":{\"resetDays\":7},\"monthly\":{\"resetDay\":1,\"handleMonthEnd\":\"last-day\"}}'  # JSON config for quota system\n# Quota configuration (JSON format):\n# - cleanup.enabled: Enable cleanup of old quota usage records (default: true)\n# - cleanup.retentionDays: Days to keep quota usage history (default: 90, range: 1-3650)\n# - weeklyRolling.resetDays: Days between weekly rolling quota resets (default: 7, range: 1-365)\n# - monthly.resetDay: Day of month for monthly quota resets (default: 1, range: 1-31)\n# - monthly.handleMonthEnd: How to handle months without resetDay: 'last-day', 'skip-month', 'next-month' (default: last-day)\n\n# Approval System Configuration\napprovalExpiration='{\"enabled\":false,\"defaultExpirationHours\":72,\"expirationAction\":\"expire\",\"maintenanceCronExpression\":\"0 */4 * * *\",\"cleanupExpiredDays\":30}'  # JSON config for approval expiration\n# Approval expiration configuration (JSON format):\n# - enabled: Enable automatic approval expiration (default: false)\n# - defaultExpirationHours: Default hours before approval expires (range: 1-8760)\n# - expirationAction: What happens when approval expires: 'expire', 'auto_approve' (default: expire)\n# - quotaExceededExpirationHours: Override expiration for quota exceeded triggers (optional, range: 1-8760)\n# - routerRuleExpirationHours: Override expiration for router rule triggers (optional, range: 1-8760)\n# - manualFlagExpirationHours: Override expiration for manual flag triggers (optional, range: 1-8760)\n# - contentCriteriaExpirationHours: Override expiration for content criteria triggers (optional, range: 1-8760)\n# - maintenanceCronExpression: Cron expression for maintenance frequency (default: \"0 */4 * * *\" - every 4 hours)\n# - cleanupExpiredDays: Days to keep expired approval records (default: 30, range: 1-365)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"authentication-configuration-details",children:"Authentication Configuration Details"}),"\n",(0,o.jsxs)(n.p,{children:["When using ",(0,o.jsx)(n.code,{children:"authenticationMethod=requiredExceptLocal"}),", connections from the following private IP ranges will bypass authentication:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"127.0.0.0/8"})," - localhost (127.0.0.1)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"10.0.0.0/8"})," - Private network Class A (10.x.x.x)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"172.16.0.0/12"})," - Private network Class B (172.16.x.x - 172.31.x.x)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"192.168.0.0/16"})," - Private network Class C (192.168.x.x)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"169.254.0.0/16"})," - Link-local addresses (APIPA)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"::1/128"})," - IPv6 localhost"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"fc00::/7"})," - IPv6 unique local addresses"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"fe80::/10"})," - IPv6 link-local addresses"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["::ffff",":x",".x.x.x"]})," - IPv4-mapped IPv6 addresses"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"Security Consideration",type:"warning",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"requiredExceptLocal"})," setting bypasses authentication for all connections from private network ranges. Ensure your network topology is secure and that only trusted devices can access these IP ranges."]})}),"\n",(0,o.jsx)(n.h2,{id:"environment-variable-categories",children:"Environment Variable Categories"}),"\n",(0,o.jsx)(n.h3,{id:"core-application",children:"Core Application"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"baseUrl"}),", ",(0,o.jsx)(n.code,{children:"port"}),", ",(0,o.jsx)(n.code,{children:"TZ"})," - Essential server configuration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"logLevel"}),", ",(0,o.jsx)(n.code,{children:"NODE_ARGS"})," - Logging configuration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"authenticationMethod"})," - Security settings"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dbType"}),", ",(0,o.jsx)(n.code,{children:"dbHost"}),", ",(0,o.jsx)(n.code,{children:"dbPort"}),", ",(0,o.jsx)(n.code,{children:"dbName"}),", ",(0,o.jsx)(n.code,{children:"dbUser"}),", ",(0,o.jsx)(n.code,{children:"dbPassword"})," - Database connection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dbConnectionString"})," - Alternative connection string format"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dbPath"})," - SQLite-specific setting"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"security--sessions",children:"Security & Sessions"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"cookieSecret"}),", ",(0,o.jsx)(n.code,{children:"cookieName"}),", ",(0,o.jsx)(n.code,{children:"cookieSecured"})," - Session management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"allowIframes"})," - iframe embedding support"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rateLimitMax"})," - Rate limiting"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"external-integrations",children:"External Integrations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"discordWebhookUrl"}),", ",(0,o.jsx)(n.code,{children:"discordBotToken"}),", ",(0,o.jsx)(n.code,{children:"discordClientId"}),", ",(0,o.jsx)(n.code,{children:"discordGuildId"})," - Discord"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"appriseUrl"}),", ",(0,o.jsx)(n.code,{children:"enableApprise"}),", ",(0,o.jsx)(n.code,{children:"systemAppriseUrl"})," - Apprise notifications"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"tautulliEnabled"}),", ",(0,o.jsx)(n.code,{children:"tautulliUrl"}),", ",(0,o.jsx)(n.code,{children:"tautulliApiKey"})," - Tautulli integration"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"media-management",children:"Media Management"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"sonarr*"})," variables - Sonarr instance seeding (development)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"radarr*"})," variables - Radarr instance seeding (development)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"plex*"})," variables - Plex server integration"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"tag*"})," variables - User tagging configuration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"delete*"})," variables - Automated deletion settings"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"plexSessionMonitoring"})," - JSON configuration for session monitoring"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"pending*"})," variables - Notification queue settings"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"quota--approval-systems",children:"Quota & Approval Systems"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"quotaSettings"})," - JSON configuration for quota management and cleanup"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"approvalExpiration"})," - JSON configuration for approval workflow expiration"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"Development Only",type:"warning",children:(0,o.jsx)(n.p,{children:'Variables marked with "dev only" or "development" comments should not be used in production environments. They are intended for testing and development setup only.'})}),"\n",(0,o.jsx)(n.h2,{id:"variable-override-behavior",children:"Variable Override Behavior"}),"\n",(0,o.jsxs)(n.p,{children:["Environment variables in the ",(0,o.jsx)(n.code,{children:".env"})," file will override settings configured in the web UI ",(0,o.jsx)(n.strong,{children:"on application restart"}),". See the ",(0,o.jsx)(n.a,{href:"../installation/configuration",children:"Configuration Guide"})," for details."]})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);