"use strict";(self.webpackChunk_watchlist_v2_docs=self.webpackChunk_watchlist_v2_docs||[]).push([[569],{84208:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"notifications/public-content","title":"Public Content Notifications","description":"Public content notifications broadcast content availability to shared channels, independent of individual user watchlists. Perfect for notifying entire communities about newly available content.","source":"@site/docs/notifications/public-content.md","sourceDirName":"notifications","slug":"/notifications/public-content","permalink":"/Pulsarr/docs/notifications/public-content","draft":false,"unlisted":false,"editUrl":"https://github.com/jamcalli/pulsarr/edit/main/docs/docs/notifications/public-content.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Tautulli Notifications","permalink":"/Pulsarr/docs/notifications/tautulli"},"next":{"title":"Delete Sync","permalink":"/Pulsarr/docs/utilities/delete-sync"}}');var t=n(74848),o=n(28453);const l={sidebar_position:4},r="Public Content Notifications",c={},d=[{value:"Quick Setup",id:"quick-setup",level:2},{value:"Configuration Fields",id:"configuration-fields",level:2},{value:"Multiple URLs",id:"multiple-urls",level:3},{value:"URL Selection",id:"url-selection",level:2},{value:"Features",id:"features",level:2},{value:"Example Configuration",id:"example-configuration",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function a(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"public-content-notifications",children:"Public Content Notifications"})}),"\n",(0,t.jsx)(i.p,{children:"Public content notifications broadcast content availability to shared channels, independent of individual user watchlists. Perfect for notifying entire communities about newly available content."}),"\n",(0,t.jsx)(i.h2,{id:"quick-setup",children:"Quick Setup"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["Navigate to ",(0,t.jsx)(i.strong,{children:"Utilities"})," \u2192 ",(0,t.jsx)(i.strong,{children:"Public Content Notifications"})]}),"\n",(0,t.jsxs)(i.li,{children:["Toggle ",(0,t.jsx)(i.strong,{children:"Enable Public Content Notifications"})," to ",(0,t.jsx)(i.code,{children:"ON"})]}),"\n",(0,t.jsx)(i.li,{children:"Configure notification URLs (see below)"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"configuration-fields",children:"Configuration Fields"}),"\n",(0,t.jsx)(i.p,{children:"Six fields provide flexible routing options:"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Discord Fields:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Discord Webhook URLs"})," - General endpoints (all content)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Discord Webhook URLs (Movies)"})," - Movie-specific endpoints"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Discord Webhook URLs (Shows)"})," - TV show-specific endpoints"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Apprise Fields:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Apprise URLs"})," - General endpoints (all content)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Apprise URLs (Movies)"})," - Movie-specific endpoints"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Apprise URLs (Shows)"})," - TV show-specific endpoints"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"multiple-urls",children:"Multiple URLs"}),"\n",(0,t.jsxs)(i.p,{children:["Every field supports multiple URLs using the ",(0,t.jsx)(i.strong,{children:"+ button"})," to add additional input fields. Empty fields are automatically removed when saving."]}),"\n",(0,t.jsx)(i.h2,{id:"url-selection",children:"URL Selection"}),"\n",(0,t.jsx)(i.p,{children:"The system determines which URLs to use based on content type:"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"For Movies:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["If ",(0,t.jsx)(i.strong,{children:"Movie-specific URLs"})," are configured \u2192 uses only those"]}),"\n",(0,t.jsxs)(i.li,{children:["If ",(0,t.jsx)(i.strong,{children:"no Movie-specific URLs"})," \u2192 uses General URLs instead"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"All configured URLs"})," for the selected type receive notifications"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"For TV Shows:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["If ",(0,t.jsx)(i.strong,{children:"Show-specific URLs"})," are configured \u2192 uses only those"]}),"\n",(0,t.jsxs)(i.li,{children:["If ",(0,t.jsx)(i.strong,{children:"no Show-specific URLs"})," \u2192 uses General URLs instead"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"All configured URLs"})," for the selected type receive notifications"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Important:"})," The system sends to ALL configured URLs for the content type - it doesn't prioritize one over another."]}),"\n",(0,t.jsx)(i.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"@ Mentions"}),": Discord notifications automatically mention users who have the content watchlisted and have Discord IDs associated with their user"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Multiple Services"}),": Discord and Apprise work independently"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Content Types"}),": Movies, TV episodes, and season packs"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"# Simple setup - all content to one channel\nDiscord Webhook URLs: https://discord.com/api/webhooks/media-releases/token123\n\n# Advanced setup - separate channels\nDiscord Webhook URLs (Movies): https://discord.com/api/webhooks/movies/token1\nDiscord Webhook URLs (Shows): https://discord.com/api/webhooks/tv-shows/token2\nApprise URLs: slack://workspace/channel/token\n"})}),"\n",(0,t.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"No notifications received:"})}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Verify feature is enabled"}),"\n",(0,t.jsx)(i.li,{children:"Check at least one URL field is configured"}),"\n",(0,t.jsx)(i.li,{children:"Ensure underlying services (Discord/Apprise) are enabled"}),"\n",(0,t.jsx)(i.li,{children:"Review logs for errors"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Partial notifications:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Check service-specific configuration"}),"\n",(0,t.jsx)(i.li,{children:"Verify URL formatting"}),"\n",(0,t.jsx)(i.li,{children:"Review error logs for specific failures"}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);